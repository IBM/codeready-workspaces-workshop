{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Workshop Title \u00b6 Welcome to our workshop! In this workshop we'll be using foo to accomplish bar. The goals of this workshop are: Goals! Have fun! About this workshop \u00b6 The introductory page of the workshop is broken down into the following sections: Agenda Compatibility Technology Used Credits Agenda \u00b6 Lab 0: Pre-work Pre-work for the project Lab 1: Some Title Exercise to do the thing Compatibility \u00b6 This workshop has been tested on the following platforms: osName : version X, version Y Technology Used \u00b6 Brief Description Credits \u00b6 Full Name","title":"About the workshop"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#workshop-title","text":"Welcome to our workshop! In this workshop we'll be using foo to accomplish bar. The goals of this workshop are: Goals! Have fun!","title":"Workshop Title"},{"location":"#about-this-workshop","text":"The introductory page of the workshop is broken down into the following sections: Agenda Compatibility Technology Used Credits","title":"About this workshop"},{"location":"#agenda","text":"Lab 0: Pre-work Pre-work for the project Lab 1: Some Title Exercise to do the thing","title":"Agenda"},{"location":"#compatibility","text":"This workshop has been tested on the following platforms: osName : version X, version Y","title":"Compatibility"},{"location":"#technology-used","text":"Brief Description","title":"Technology Used"},{"location":"#credits","text":"Full Name","title":"Credits"},{"location":"lab-1/","text":"Portable Development Environments using Devfiles \u00b6 Introduction \u00b6 In this lab we will explore how we can create portable development environments using CodeReady Workspaces and the concept of devfiles. The devfiles offer developers a starting point for building applications by offering containerized runtime environments, starting applications with additional functionality built in, and tools to aid in development. For the lab today we will be using CodeReady Workspaces which is a browser based code editor that runs on OpenShift. Prereqs \u00b6 An IBM Cloud Account A GitHub account Using devfiles in CodeRedy Workspaces \u00b6 (Optional) Install CodeReady Workspaces \u00b6 Navigate to IBM Cloud Log in to your account Click on the menu button at the top left of the page, hover over OpenShift and click on Clusters . There should only be one cluster that shows up for you. Click on it. Then, click on the blue OpenShift Web Console button near the top right of the page. The first step is to create a project for us to work in. Click on Projects under the Home section in the left navigation bar. Then, click on Create Project In the new dialog window, enter the name devfile-project and click on Create . Now we need to navigate to the Operator Hub to install CodeReady Workspaces. Find the Operators section on the left navigation bar and click on Operator Hub . The Operator Hub has a large variety of software available as operators with easy installation and lifecycle management. In the filter by keyword textbox, enter code to filter the operators and show the CodeReady Workspaces operator. Click on the Red Hat CodeReady Workspaces tile and then click on the blue Install button. Ensure that under the Installation Mode you have the A specific namespace on the cluster option selected and devfile-project is selected in the dropdown. Then click Subscribe . You should now be taken to the Installed Operators section. Wait until the CodeReady Workspaces operator is installed and then click on it. From the CodeReady Workspaces operator details page, click on the Create Instance link. On the next page, leave everything as it is and click on the Create button at the bottom. This will begin the process of creating the necessary resources to bring up CodeReady Workspaces. This process will take about 2-5 minutes to complete. Creating a DevFile in CodeReady Workspaces \u00b6 To launch CodeReady Workspaces, click on Networking on the left navigation bar and select Routes . Look for the route named codeready and click on the link under the location column. You will then be taken to a log in page for CodeReady Workspaces. Since we are not using OpenShift's authentication, we will need to create a new log in. Click on the Register button at the botom of the dialog box. Enter the information in the registration form to create your account for CodeReady Workspaces. Feel free to use made up information as the only things that really matters are Username , Password , and Confirm Password fields. This information is only used for this instance of CodeReady Workspaces and will stay on the cluster. When done click on Register You will then be taken to a page full of different workspaces. These workspaces contain tools and a development environment needed to start developing in those specific languages. These environment definitions are contained in what's called a Devfile . Let's create our own devfile and workspace. Click on the Custom Workspace tab at the top of the page. For Workspace Name enter Node-Example . For the URL of devfile box in the Devfile section enter https://raw.githubusercontent.com/odrodrig/nodejs-ex/master/devfile.yaml and then click on Load devfile . If you are unable to load the devfile from GitHub, here are the contents that you can copy and paste in: apiVersion : 1.0.0 metadata : generateName : Node-Example components : - mountSources : true endpoints : - name : nodejs port : 3000 memoryLimit : 1024Mi type : dockerimage alias : runtime image : 'quay.io/eclipse/che-nodejs10-ubi:nightly' Click on Create and Open at the bottom of the page. The button might be hidden so you might need to scroll down to see it. The workspace will take a few minutes to create so let's get our own copy of the code that we will be using for the rest of the lab. In a new browser window, navigate to https://github.com/odrodrig/nodejs-ex and click on the Fork button at the top right of the page. Once you are taken to your own repo, look for a green button that says Code on the right side of the page and click on it. Ensure the box is titled Clone with HTTPS and copy the URL listed. Go back to your browser tab with CodeReady Workspaces. Hopefully the workspace creation is finished by now, if not, just give it a few more minutes. When done, you should see be inside the code editor. Go to View in the toolbar and select Find Command... In the new dialog that appears enter git and select Git: clone . When asked for a Repository URL enter the URL that you copied earlier from your git repository then press enter. Expand the project explorer by clicking on the icon that looks like 2 pieces of paper on the left toolbar. You should see the project that you cloned from GitHub. Click on the folder of the project that you cloned and select the devfile.yaml file. This is the file we used to create this workspace. Let's break down this file to understand what it defined for us in the workshop. apiVersion - The version of the devfile API we are using. This will not usually change. metadata - Contains metadata for the workspace. Name is a required property. components - These are the additions to your workspace such as plugins and tools to assist with development or application components such as kubernetes objects or docker containers. In our imported devfile, we have one component which is the containerized runtime environment for our node application. Another type of component that can be added is a che plugin , These plugins give us additional functionality in the CodeReady Workspaces IDE. - In our workspace let's add a typescript plugin that will give us some code completion, error checking, and more. Click on View in the top toolbar and select Plugins . This will open up a new pane on the left side with a list of all plugins available to be installed. In the search bar, enter typescript and click on the Install button for the result that appears. Then, click on the green message that appears that says Click here to apply changes , then click on Restart in the new dialog box that comes up. You might be asked if you are sure you want to leave the page, click on Leave Page . The workspace will be rebuilt with the new plugin installed. Optionally, if you want to test out the plugin you can open up the server.js file, type in jiberish, and see the plugin highlight the mistake. As you can see in the screenshot below, the typescript plugin ( ts ) caught the syntax error. Be sure to delete any jiberish you do type out. CodeReady Workspaces will maintain a devfile of the workspace's current configuration, including the plugin we just installed. To access this devfile, click on the yellow button at the top left of the page to expand the left menu. Then click on Workspaces . Click on your workspace and then click on the Devfile tab. Copy the entire devfile contents. Return to the workspace by clicking on the Node-Example workspace on the left menu. Then replace the contents of devfile.yaml with the contents you copied earlier by highlighting all the code and pasting in the devfile. You should see a new entry under components ; the typescript che plugin. Another property that you can add to devfiles is the projects array. This will bring in those project files into the environment. For our lab we will specify a git repo in this section so that it will be cloned in automatically when the environment is created. In devfile.yaml add the following code block to the bottom: projects : - name : nodejs-ex source : location : 'https://github.com/odrodrig/nodejs-ex.git' type : git branch : master Your new devfile should look like this: metadata : name : Node-Example components : - mountSources : true endpoints : - name : nodejs port : 3000 memoryLimit : 1024Mi type : dockerimage alias : runtime image : 'quay.io/eclipse/che-nodejs10-ubi:nightly' - id : che-incubator/typescript/latest type : chePlugin apiVersion : 1.0.0 projects : - name : nodejs-ex source : location : 'https://github.com/odrodrig/nodejs-ex.git' type : git branch : master Then, edit the location property of the project in the devfile to be the git repository url that you copied earlier. You can get this URL from the tab that has GitHub open. Next, let's add the commands array which will allow us to run commands to build and run the application within the runtime container. Add the following to the and of the devfile. commands : - name : devBuild actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : npm install component : runtime - name : devRun actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : nodemon app.js component : runtime Your devfile should now look like this: metadata : name : Node-Example projects : - name : nodejs-ex source : location : 'https://github.com/odrodrig/nodejs-ex.git' type : git branch : master components : - mountSources : true endpoints : - name : nodejs port : 3000 memoryLimit : 1024Mi type : dockerimage alias : runtime image : 'quay.io/eclipse/che-nodejs10-ubi:nightly' - id : che-incubator/typescript/latest type : chePlugin apiVersion : 1.0.0 commands : - name : devBuild actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : npm install component : runtime - name : devRun actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : nodemon app.js component : runtime Now we need to rebuild the workspace to include the commands we just added. Copy the contents of your new devfile.yaml then click on the yellow menu button at the top left and click on the Workspaces button again. Next, click on your workspace and then click on the devfile tab. Replace the existing devfile by highlighting the code and pasting in the code that you copied from your new devfile. Then, click on the green Apply button at the bottom right. This will rebuild your workspace and take a few minutes. Return to the workspace by clicking on the Node-Example workspace on the left menu. Now we can run our application using the commands that we just added. Click on the Terminal button in the toolbar and select Run task... . This is where you can run commands specified in the devfile. In the new dialog that appears select devBuild and then select Continue without scanning the task output . This will run npm install in the runtime container to download the necessary dependencies for our application. You should notice a new tab appear at the bottom of the page with the build output. Next, click on Terminal again, select Run task... , and this time select devRun . You can again click on Continue without scanning the tsk output when asked. This will run the application in the runtime container and allow us to test out it's functionality. After running the application, you will get a pop up saying that A process is now listening on port 3000.... . Click on the blue button to open the link to view your running application. A new section should open up on the right side of the page which contains a preview of your application. By looking in the address bar you may also notice that this is actually running as a container on OpenShift. Any changes you make to the code will be automatically applied to the running application giving you an easy way to test changes out. Let's test this out. In your project explorer on the left side of the page, click on the nodejs-ex folder to expand it and select server.js . Then, go to line 55. You should see the following code there: res . send ( 'Hello from Node.js Starter Application with odo!' ); Go ahead and customize the message to say what ever you'd like or simply add something extra at the end of the string in between the single quotes. For example: res . send ( 'Hello from Node.js Starter Application with CodeReady Workspaces!' ); You should notice some output in the devRun tab at the bottom of the page. This means that your application has detected changes and is rebuilding. Click on the refresh button in the application preview on the right side of the page to view your latest changes. Now let's push our changes back to GitHub so that we can share this workspace with other developers. Click on the Source Control: git button on the left toolbar. It should look like the following: You will be shown a list of changes we made since the project was cloned from github. Hover over the word Changes and you should see a + appear. Click on it to stage all of our changes for a commit. Then click on the text box labeled Message and enter Updated devfile . Then click on the check mark right above the textbox to commit your changes. Next, click on the 3-button menu in the Source Control panel and select push . You will then get a prompt asking for your username. Enter your GitHub username and then press enter. Then, you will be asked for your password. Enter your GitHub password and press enter. With that done your new devfile has been pushed to GitHub and can be shared with other developers using CodeReady Workspaces. EXTRA CREDIT: Local deployment of devfile with odo \u00b6 In this section we will explore how we can take the devfile we created earlier and use it to develop our application locally. This section requires a local terminal environment, Docker, and the odo cli . Then, we need to clone the repository locally. Run the following command in that terminal environment: git clone https://github.com/odrodrig/nodejs-ex.git cd nodejs-ex In order to use devfiels with odo, we need to enable experimental features. Run the following: bash odo preference set experimental true Next let's target docker as our deploytment target bash odo preference set pushtarget docker Then, we will create a url which will allow us to expose our application to traffic. This is essentially creating a way for us to communicate with the application once we deploy it. bash odo url create --port 3000 Now we can deploy the application to docker using odo push . bash odo push Next, we need to find out what port our application was exposed on. Although we specified that the application listens on port 3000, that is not the port that will be exposed on the host machine. To find the correct port, run the following command: bash docker ps You should see something like this: bash CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 1623815845bf quay.io/eclipse/che-nodejs10-ubi:nightly \"/opt/odo/bin/superv\u2026\" 27 seconds ago Up 26 seconds 8080/tcp, 127.0.0.1:51750->3000/tcp naughty_wu Look for the port binding under the PORTS column. It should be something like 8080/tcp, 127.0.0.1:51750->3000/tcp . the 51750 is the port that the application is exposed on. Navigate to the application by opening your browser and going to localhost:\\<port> where port is the external port retrieved in the previous step. For example, my application is exposed at localhost:51750 You can see the same application that we started with in CodeReady Workspaces is deployed locally in Docker. You can also run odo watch and have code changes propagated to the running container automatically. Conclusion \u00b6","title":"Lab 1. Some Title"},{"location":"lab-1/#portable-development-environments-using-devfiles","text":"","title":"Portable Development Environments using Devfiles"},{"location":"lab-1/#introduction","text":"In this lab we will explore how we can create portable development environments using CodeReady Workspaces and the concept of devfiles. The devfiles offer developers a starting point for building applications by offering containerized runtime environments, starting applications with additional functionality built in, and tools to aid in development. For the lab today we will be using CodeReady Workspaces which is a browser based code editor that runs on OpenShift.","title":"Introduction"},{"location":"lab-1/#prereqs","text":"An IBM Cloud Account A GitHub account","title":"Prereqs"},{"location":"lab-1/#using-devfiles-in-coderedy-workspaces","text":"","title":"Using devfiles in CodeRedy Workspaces"},{"location":"lab-1/#optional-install-codeready-workspaces","text":"Navigate to IBM Cloud Log in to your account Click on the menu button at the top left of the page, hover over OpenShift and click on Clusters . There should only be one cluster that shows up for you. Click on it. Then, click on the blue OpenShift Web Console button near the top right of the page. The first step is to create a project for us to work in. Click on Projects under the Home section in the left navigation bar. Then, click on Create Project In the new dialog window, enter the name devfile-project and click on Create . Now we need to navigate to the Operator Hub to install CodeReady Workspaces. Find the Operators section on the left navigation bar and click on Operator Hub . The Operator Hub has a large variety of software available as operators with easy installation and lifecycle management. In the filter by keyword textbox, enter code to filter the operators and show the CodeReady Workspaces operator. Click on the Red Hat CodeReady Workspaces tile and then click on the blue Install button. Ensure that under the Installation Mode you have the A specific namespace on the cluster option selected and devfile-project is selected in the dropdown. Then click Subscribe . You should now be taken to the Installed Operators section. Wait until the CodeReady Workspaces operator is installed and then click on it. From the CodeReady Workspaces operator details page, click on the Create Instance link. On the next page, leave everything as it is and click on the Create button at the bottom. This will begin the process of creating the necessary resources to bring up CodeReady Workspaces. This process will take about 2-5 minutes to complete.","title":"(Optional) Install CodeReady Workspaces"},{"location":"lab-1/#creating-a-devfile-in-codeready-workspaces","text":"To launch CodeReady Workspaces, click on Networking on the left navigation bar and select Routes . Look for the route named codeready and click on the link under the location column. You will then be taken to a log in page for CodeReady Workspaces. Since we are not using OpenShift's authentication, we will need to create a new log in. Click on the Register button at the botom of the dialog box. Enter the information in the registration form to create your account for CodeReady Workspaces. Feel free to use made up information as the only things that really matters are Username , Password , and Confirm Password fields. This information is only used for this instance of CodeReady Workspaces and will stay on the cluster. When done click on Register You will then be taken to a page full of different workspaces. These workspaces contain tools and a development environment needed to start developing in those specific languages. These environment definitions are contained in what's called a Devfile . Let's create our own devfile and workspace. Click on the Custom Workspace tab at the top of the page. For Workspace Name enter Node-Example . For the URL of devfile box in the Devfile section enter https://raw.githubusercontent.com/odrodrig/nodejs-ex/master/devfile.yaml and then click on Load devfile . If you are unable to load the devfile from GitHub, here are the contents that you can copy and paste in: apiVersion : 1.0.0 metadata : generateName : Node-Example components : - mountSources : true endpoints : - name : nodejs port : 3000 memoryLimit : 1024Mi type : dockerimage alias : runtime image : 'quay.io/eclipse/che-nodejs10-ubi:nightly' Click on Create and Open at the bottom of the page. The button might be hidden so you might need to scroll down to see it. The workspace will take a few minutes to create so let's get our own copy of the code that we will be using for the rest of the lab. In a new browser window, navigate to https://github.com/odrodrig/nodejs-ex and click on the Fork button at the top right of the page. Once you are taken to your own repo, look for a green button that says Code on the right side of the page and click on it. Ensure the box is titled Clone with HTTPS and copy the URL listed. Go back to your browser tab with CodeReady Workspaces. Hopefully the workspace creation is finished by now, if not, just give it a few more minutes. When done, you should see be inside the code editor. Go to View in the toolbar and select Find Command... In the new dialog that appears enter git and select Git: clone . When asked for a Repository URL enter the URL that you copied earlier from your git repository then press enter. Expand the project explorer by clicking on the icon that looks like 2 pieces of paper on the left toolbar. You should see the project that you cloned from GitHub. Click on the folder of the project that you cloned and select the devfile.yaml file. This is the file we used to create this workspace. Let's break down this file to understand what it defined for us in the workshop. apiVersion - The version of the devfile API we are using. This will not usually change. metadata - Contains metadata for the workspace. Name is a required property. components - These are the additions to your workspace such as plugins and tools to assist with development or application components such as kubernetes objects or docker containers. In our imported devfile, we have one component which is the containerized runtime environment for our node application. Another type of component that can be added is a che plugin , These plugins give us additional functionality in the CodeReady Workspaces IDE. - In our workspace let's add a typescript plugin that will give us some code completion, error checking, and more. Click on View in the top toolbar and select Plugins . This will open up a new pane on the left side with a list of all plugins available to be installed. In the search bar, enter typescript and click on the Install button for the result that appears. Then, click on the green message that appears that says Click here to apply changes , then click on Restart in the new dialog box that comes up. You might be asked if you are sure you want to leave the page, click on Leave Page . The workspace will be rebuilt with the new plugin installed. Optionally, if you want to test out the plugin you can open up the server.js file, type in jiberish, and see the plugin highlight the mistake. As you can see in the screenshot below, the typescript plugin ( ts ) caught the syntax error. Be sure to delete any jiberish you do type out. CodeReady Workspaces will maintain a devfile of the workspace's current configuration, including the plugin we just installed. To access this devfile, click on the yellow button at the top left of the page to expand the left menu. Then click on Workspaces . Click on your workspace and then click on the Devfile tab. Copy the entire devfile contents. Return to the workspace by clicking on the Node-Example workspace on the left menu. Then replace the contents of devfile.yaml with the contents you copied earlier by highlighting all the code and pasting in the devfile. You should see a new entry under components ; the typescript che plugin. Another property that you can add to devfiles is the projects array. This will bring in those project files into the environment. For our lab we will specify a git repo in this section so that it will be cloned in automatically when the environment is created. In devfile.yaml add the following code block to the bottom: projects : - name : nodejs-ex source : location : 'https://github.com/odrodrig/nodejs-ex.git' type : git branch : master Your new devfile should look like this: metadata : name : Node-Example components : - mountSources : true endpoints : - name : nodejs port : 3000 memoryLimit : 1024Mi type : dockerimage alias : runtime image : 'quay.io/eclipse/che-nodejs10-ubi:nightly' - id : che-incubator/typescript/latest type : chePlugin apiVersion : 1.0.0 projects : - name : nodejs-ex source : location : 'https://github.com/odrodrig/nodejs-ex.git' type : git branch : master Then, edit the location property of the project in the devfile to be the git repository url that you copied earlier. You can get this URL from the tab that has GitHub open. Next, let's add the commands array which will allow us to run commands to build and run the application within the runtime container. Add the following to the and of the devfile. commands : - name : devBuild actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : npm install component : runtime - name : devRun actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : nodemon app.js component : runtime Your devfile should now look like this: metadata : name : Node-Example projects : - name : nodejs-ex source : location : 'https://github.com/odrodrig/nodejs-ex.git' type : git branch : master components : - mountSources : true endpoints : - name : nodejs port : 3000 memoryLimit : 1024Mi type : dockerimage alias : runtime image : 'quay.io/eclipse/che-nodejs10-ubi:nightly' - id : che-incubator/typescript/latest type : chePlugin apiVersion : 1.0.0 commands : - name : devBuild actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : npm install component : runtime - name : devRun actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : nodemon app.js component : runtime Now we need to rebuild the workspace to include the commands we just added. Copy the contents of your new devfile.yaml then click on the yellow menu button at the top left and click on the Workspaces button again. Next, click on your workspace and then click on the devfile tab. Replace the existing devfile by highlighting the code and pasting in the code that you copied from your new devfile. Then, click on the green Apply button at the bottom right. This will rebuild your workspace and take a few minutes. Return to the workspace by clicking on the Node-Example workspace on the left menu. Now we can run our application using the commands that we just added. Click on the Terminal button in the toolbar and select Run task... . This is where you can run commands specified in the devfile. In the new dialog that appears select devBuild and then select Continue without scanning the task output . This will run npm install in the runtime container to download the necessary dependencies for our application. You should notice a new tab appear at the bottom of the page with the build output. Next, click on Terminal again, select Run task... , and this time select devRun . You can again click on Continue without scanning the tsk output when asked. This will run the application in the runtime container and allow us to test out it's functionality. After running the application, you will get a pop up saying that A process is now listening on port 3000.... . Click on the blue button to open the link to view your running application. A new section should open up on the right side of the page which contains a preview of your application. By looking in the address bar you may also notice that this is actually running as a container on OpenShift. Any changes you make to the code will be automatically applied to the running application giving you an easy way to test changes out. Let's test this out. In your project explorer on the left side of the page, click on the nodejs-ex folder to expand it and select server.js . Then, go to line 55. You should see the following code there: res . send ( 'Hello from Node.js Starter Application with odo!' ); Go ahead and customize the message to say what ever you'd like or simply add something extra at the end of the string in between the single quotes. For example: res . send ( 'Hello from Node.js Starter Application with CodeReady Workspaces!' ); You should notice some output in the devRun tab at the bottom of the page. This means that your application has detected changes and is rebuilding. Click on the refresh button in the application preview on the right side of the page to view your latest changes. Now let's push our changes back to GitHub so that we can share this workspace with other developers. Click on the Source Control: git button on the left toolbar. It should look like the following: You will be shown a list of changes we made since the project was cloned from github. Hover over the word Changes and you should see a + appear. Click on it to stage all of our changes for a commit. Then click on the text box labeled Message and enter Updated devfile . Then click on the check mark right above the textbox to commit your changes. Next, click on the 3-button menu in the Source Control panel and select push . You will then get a prompt asking for your username. Enter your GitHub username and then press enter. Then, you will be asked for your password. Enter your GitHub password and press enter. With that done your new devfile has been pushed to GitHub and can be shared with other developers using CodeReady Workspaces.","title":"Creating a DevFile in CodeReady Workspaces"},{"location":"lab-1/#extra-credit-local-deployment-of-devfile-with-odo","text":"In this section we will explore how we can take the devfile we created earlier and use it to develop our application locally. This section requires a local terminal environment, Docker, and the odo cli . Then, we need to clone the repository locally. Run the following command in that terminal environment: git clone https://github.com/odrodrig/nodejs-ex.git cd nodejs-ex In order to use devfiels with odo, we need to enable experimental features. Run the following: bash odo preference set experimental true Next let's target docker as our deploytment target bash odo preference set pushtarget docker Then, we will create a url which will allow us to expose our application to traffic. This is essentially creating a way for us to communicate with the application once we deploy it. bash odo url create --port 3000 Now we can deploy the application to docker using odo push . bash odo push Next, we need to find out what port our application was exposed on. Although we specified that the application listens on port 3000, that is not the port that will be exposed on the host machine. To find the correct port, run the following command: bash docker ps You should see something like this: bash CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 1623815845bf quay.io/eclipse/che-nodejs10-ubi:nightly \"/opt/odo/bin/superv\u2026\" 27 seconds ago Up 26 seconds 8080/tcp, 127.0.0.1:51750->3000/tcp naughty_wu Look for the port binding under the PORTS column. It should be something like 8080/tcp, 127.0.0.1:51750->3000/tcp . the 51750 is the port that the application is exposed on. Navigate to the application by opening your browser and going to localhost:\\<port> where port is the external port retrieved in the previous step. For example, my application is exposed at localhost:51750 You can see the same application that we started with in CodeReady Workspaces is deployed locally in Docker. You can also run odo watch and have code changes propagated to the running container automatically.","title":"EXTRA CREDIT: Local deployment of devfile with odo"},{"location":"lab-1/#conclusion","text":"","title":"Conclusion"},{"location":"lab-1-no-git/","text":"Portable Development Environments using Devfiles \u00b6 Introduction \u00b6 In this lab we will explore how we can create portable development environments using CodeReady Workspaces and the concept of devfiles. The devfiles offer developers a starting point for building applications by offering containerized runtime environments, starting applications with additional functionality built in, and tools to aid in development. For the lab today we will be using CodeReady Workspaces which is a browser based code editor that runs on OpenShift. Prereqs \u00b6 An IBM Cloud Account A GitHub account Accessing to the environment \u00b6 The grant cluster method to get access to a Kubernetes cluster will assign access permissions to a cluster or namespace in a cluster that was created prior to the request. Creating a cluster and provisioning the VMs and other resources and deploying the tools may take up to 15 minutes and longer if queued. Permissioning access to an existing cluster in contrast happens in 1 or 2 minutes depending on the number of concurrent requests. You need an IBM Cloud account to access your cluster, If you do not have an IBM Cloud account yet, register at https://cloud.ibm.com/registration , Or find instructions to create a new IBM Cloud account here , To grant a cluster, You need to be given a URL to submit your grant cluster request, Open the URL to grant a cluster, e.g. https://<workshop>.mybluemix.net , The grant cluster URL should open the following page, Log in to this IBM Cloud account using the lab key given to you by the instructor and your IBM Id to access your IBM Cloud account, Instructions will ask to Log in to this IBM Cloud account When you click the link to log in to the IBM Cloud account, the IBM Cloud overview page will load with an overview of all resources on the account. In the top right, you will see an active account listed. The active account should be the account on which the cluster is created, which is not your personal account. Click the account dropdown if you need to change the active account. Navigate to Clusters, And select the cluster assigned to you... Details for your cluster will load. Click on the blue OpenShift web console button. Using devfiles in CodeRedy Workspaces \u00b6 Accessing CodeReady Workspaces \u00b6 To launch CodeReady Workspaces, click on Networking on the left navigation bar and select Routes . In the Project dropdown, select openshift-workspaces Look for the route named codeready and click on the link under the location column. After navigating to the link, you should get a page asking about granting permission to CodeReady Workspaces. Select Grant All . Then, you will be taken to the registration form that will need to be completed. It's important that for the username field you remove the IAM# and @abc.com parts of your identity. If you get an error message about the name needing to conform to DNS naming standards, remove any periods or special characters from your username and try again. After submitting the form you will be taken to your own personal workspaces in CodeReady Workspaces. Creating a DevFile in CodeReady Workspaces \u00b6 The first page you will be taken to is a page full of different sample workspaces. These workspaces contain tools and a development environment needed to start developing in those specific languages. These environment definitions are contained in what's called a Devfile . For this lab, we will create our own devfile and workspace. Click on the Custom Workspace tab at the top of the page. For Workspace Name enter Node-Example . For the URL of devfile box in the Devfile section enter https://raw.githubusercontent.com/odrodrig/nodejs-ex/master/devfile.yaml and then click on Load devfile . If you are unable to load the devfile from GitHub, here are the contents that you can copy and paste in: apiVersion : 1.0.0 metadata : generateName : Node-Example components : - mountSources : true endpoints : - name : nodejs port : 3000 memoryLimit : 1024Mi type : dockerimage alias : runtime image : 'quay.io/eclipse/che-nodejs10-ubi:nightly' Click on Create and Open at the bottom of the page. The button might be hidden so you might need to scroll down to see it. The workspace will take a few minutes to fully be created. When done, you should see be inside the code editor. Once the editor is up, click on the choice for Git Clone under the New section on the welcome page When asked for a Repository URL enter https://github.com/odrodrig/nodejs-ex then press enter. A new window should appear asking where to save the files, accept the default and click on the ** ** button at the bottom. When it is done cloning you should see a pop up in the bottom right of the page asking if it should open the clone repository. Click on Open . Expand the project explorer by clicking on the icon that looks like 2 pieces of paper on the left toolbar. You should see the project that you cloned from GitHub. Click on the folder of the project that you cloned and select the devfile.yaml file. This is the file we used to create this workspace. Let's break down this file to understand what it defined for us in the workshop. apiVersion - The version of the devfile API we are using. Version 2.0.0 was recently released but CodeReady Workspaces does not support it yet. metadata - Contains metadata for the workspace. Name is a required property. components - These are the additions to your workspace such as plugins and tools to assist with development or application components such as kubernetes objects or docker containers. In our imported devfile, we have one component which is the containerized runtime environment for our node application. Another type of component that can be added is a che plugin , These plugins give us additional functionality in the CodeReady Workspaces IDE. - In our workspace let's add a typescript plugin that will give us some code completion, error checking, and more. Click on View in the top toolbar and select Plugins . This will open up a new pane on the left side with a list of all plugins available to be installed. In the search bar, enter typescript and click on the Install button for the result that appears. Then, click on the green message that appears that says Click here to apply changes , then click on Restart in the new dialog box that comes up. You might be asked if you are sure you want to leave the page, click on Leave Page . The workspace will be rebuilt with the new plugin installed. Let's test out our new plugin. Open up the server.js file, type in jiberish, and see the plugin highlight the mistake. As you can see in the screenshot below, the typescript plugin ( ts ) caught the syntax error. Be sure to delete any jiberish you do type out. CodeReady Workspaces will maintain a devfile of the workspace's current configuration, including the plugin we just installed. To access this devfile, click on the yellow button at the top left of the page to expand the left menu. Then click on Workspaces . Click on your workspace and then click on the Devfile tab. Copy the entire devfile contents. Return to the workspace by clicking on the Node-Example workspace on the left menu. Then replace the contents of devfile.yaml with the contents you copied earlier by highlighting all the code and pasting in the devfile. You should see a new entry under components ; the typescript che plugin. Another property that you can add to devfiles is the projects array. This will bring in those project files into the environment. For our lab we will specify a git repo in this section so that it will be cloned in automatically when the environment is created. In devfile.yaml add the following code block to the bottom: projects : - name : nodejs-ex source : location : 'https://github.com/odrodrig/nodejs-ex.git' type : git branch : master Your new devfile should look like this: metadata : name : Node-Example components : - mountSources : true endpoints : - name : nodejs port : 3000 memoryLimit : 1024Mi type : dockerimage alias : runtime image : 'quay.io/eclipse/che-nodejs10-ubi:nightly' - id : che-incubator/typescript/latest type : chePlugin apiVersion : 1.0.0 projects : - name : nodejs-ex source : location : 'https://github.com/odrodrig/nodejs-ex.git' type : git branch : master Next, let's add the commands array which will allow us to run commands to build and run the application within the runtime container. Add the following to the and of the devfile. commands : - name : devBuild actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : npm install component : runtime - name : devRun actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : nodemon app.js component : runtime Your devfile should now look like this: metadata : name : Node-Example projects : - name : nodejs-ex source : location : 'https://github.com/odrodrig/nodejs-ex.git' type : git branch : master components : - mountSources : true endpoints : - name : nodejs port : 3000 memoryLimit : 1024Mi type : dockerimage alias : runtime image : 'quay.io/eclipse/che-nodejs10-ubi:nightly' - id : che-incubator/typescript/latest type : chePlugin apiVersion : 1.0.0 commands : - name : devBuild actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : npm install component : runtime - name : devRun actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : nodemon app.js component : runtime Now we need to rebuild the workspace to include the commands we just added. Copy the contents of your new devfile.yaml then click on the yellow menu button at the top left and click on the Workspaces button again. Next, click on your workspace and then click on the devfile tab. Replace the existing devfile by highlighting the code and pasting in the code that you copied from your new devfile. Then, click on the green Apply button at the bottom right. This will rebuild your workspace and take a few minutes. Return to the workspace by clicking on the Node-Example workspace on the left menu. Now we can run our application using the commands that we just added. Click on the Terminal button in the toolbar and select Run task... . This is where you can run commands specified in the devfile. In the new dialog that appears select devBuild . This will run npm install in the runtime container to download the necessary dependencies for our application. You should notice a new tab appear at the bottom of the page with the build output. Next, click on Terminal again, select Run task... , and this time select devRun . This will run the application in the runtime container and allow us to test out it's functionality. After running the application, you will get a pop up saying that A process is now listening on port 3000.... . Click on the blue button that says Open in Preview to open the link to view your running application. A new section should open up on the right side of the page which contains a preview of your application. By looking in the address bar you may also notice that this is actually running as a container on OpenShift. Any changes you make to the code will be automatically applied to the running application giving you an easy way to test changes out. Let's test this out. In your project explorer on the left side of the page, click on the nodejs-ex folder to expand it and select server.js . Then, go to line 55. You should see the following code there: res . send ( 'Hello from Node.js Starter Application with odo!' ); Go ahead and customize the message to say what ever you'd like or simply add something extra at the end of the string in between the single quotes. For example: res . send ( 'Hello from Node.js Starter Application with CodeReady Workspaces!' ); You should notice some output in the devRun tab at the bottom of the page. This means that your application has detected changes and is rebuilding. Click on the refresh button in the application preview on the right side of the page to view your latest changes. (Optional) Pushing changes to GitHub \u00b6 Now let's push our changes back to GitHub so that we can share this workspace with other developers. Click on the Source Control: git button on the left toolbar. It should look like the following: You will be shown a list of changes we made since the project was cloned from github. Hover over the word Changes and you should see a + appear. Click on it to stage all of our changes for a commit. Then click on the text box labeled Message and enter Updated devfile . Then click on the check mark right above the textbox to commit your changes. Next, click on the 3-button menu in the Source Control panel and select push . You will then get a prompt asking for your username. Enter your GitHub username and then press enter. Then, you will be asked for your password. Enter your GitHub password and press enter. With that done your new devfile has been pushed to GitHub and can be shared with other developers using CodeReady Workspaces. EXTRA CREDIT: Using odo to develop containerized applications \u00b6 In this section we will explore how we can take the devfile we created earlier and use it to develop our application locally. Getting access to an environment \u00b6 If you have already registered your account, you can access the lab environment at https://labs.cognitiveclass.ai and login. Navigate to https://labs.cognitiveclass.ai/register , Create a new account with your existing IBM Id. Alternative, you can choose to use a Social login (LinkedIn, Google, Github or Facebook), or for using your email account click the Cognitive Class button, Click Create an Account , Fill in your Email, Full Name, Public Username and password, click on the check boxes next to the Privacy Notice and Terms of Service to accept them. Then click on Create Account . You will then be taken to a page with a list of sandbox environments. Click on the option for Theia - Cloud IDE (With OpenShift) Wait a few minutes while your environment is created. You will be taken to a blank editor page once your environment is ready. What we really need is access to the terminal. Click on the Terminal tab near the top of the page and select New Terminal You can then click and drag the top of the terminal section upwards to make the terminal section bigger. Installing odo \u00b6 Then, we need to clone the repository locally. Run the following command in that terminal environment: git clone https://github.com/odrodrig/nodejs-ex.git cd nodejs-ex Next, we need to run the installation script for odo bash install_odo.sh Logging into our cluster \u00b6 Go back to your OpenShift web console and click on your username in the upper right and select Copy Login Command option. Click the Display Token link. Copy the contents of the field Log in with this token to the clipboard. It provides a login command with a valid token for your username. Go to the your web terminal on Skills Lab and paste in the log in command. Press enter. Now we need to point our odo instance to our own namespace that was created for us. First, list the available projects in the cluster. odo project list Then find your project, it should start with your username that you created when logging into CodeReady Workspaces and end in -codeready For example, my username is odrodrig so my project is odrodrig-codeready . In the following command replace odrodrig-codeready with your own project name. odo project set odrodrig-codeready Using odo to develop on OpenShift \u00b6 With odo you can specify a registry of components that you can create based on devfiles or Source-to-Image build containers. Let's see what components we have available to us in the odo catalog. odo catalog list components Let's create a nodejs application based on the nodejs devfile. First, delete the devfile that is in the directory. We will use the devfile that is in the devfile registry. rm devfile.yaml Create the component: odo component create nodejs nodejs-ex This command will download the devfile for the nodejs stack from the devfile registry and put it in our project directory. It will also create a .odo directory that has some configurations for deployment. Now we can deploy the application using odo push . odo push After a few minutes your application will be pushed. Find the URL to access our application. odo url list The output should be similar to: Found the following URLs for component nodejs-ex NAME STATE URL PORT SECURE KIND http-3000 Pushed http://http-3000-nodejs-ex-odrodrig-codeready.oliver-sandbox-2bef1f4b4097001da9502000c44fc2b2-0000.us-east.containers.appdomain.cloud 3000 false route Copy the URL under the URL column and paste it into a new browser tab. You should see your application running with a simple welcome message. Let's do some coding with live updates using the odo watch command. This will allow us to see changes automatically reflected in the deployed application. odo watch You should then see a message about waiting for something to change. What has happened is now there is a file watcher waiting for changes to be saved to your source code. Once changes are detected, those changes are pushed to the runtime environment that we just deployed and the application will be updated without having to do a manual push. If you resized your terminal window, make it smaller by dragging the top of the panel down to make room for the code editor. Then open the file explorer by clicking on the icon on the left navigation menu that looks like two pieces of paper. With the File explorer open, click on server.js Go to line 55 and change the welcome message in res.send() to something else like, Hello this is a test of live updates from odo . Then save the file by going to File -> Save or using the save shortcut (cmd + s for Mac, ctrl + s for Windows). Go to your browser tab that had the running application and refresh to see the new message. Let's end the odo watch session by going back to our terminal environment and pressing control + c to end it. Conclusion \u00b6 In this lab we explored the OpenShift developer experience using CodeReady Workspaces which gave us a development environment on OpenShift that we could access through our browser. We then made our own custom workspace using a devfile and made some quick edits to our sample application. Lastly, we explored odo as a cli tool that allows us to build containerized applications without having to write dockerfiles or kubernetes manifests. Using odo we were able to create a development environment that was defined in a devfile and deploy an application to OpenShift.","title":"Portable Development Environments using Devfiles"},{"location":"lab-1-no-git/#portable-development-environments-using-devfiles","text":"","title":"Portable Development Environments using Devfiles"},{"location":"lab-1-no-git/#introduction","text":"In this lab we will explore how we can create portable development environments using CodeReady Workspaces and the concept of devfiles. The devfiles offer developers a starting point for building applications by offering containerized runtime environments, starting applications with additional functionality built in, and tools to aid in development. For the lab today we will be using CodeReady Workspaces which is a browser based code editor that runs on OpenShift.","title":"Introduction"},{"location":"lab-1-no-git/#prereqs","text":"An IBM Cloud Account A GitHub account","title":"Prereqs"},{"location":"lab-1-no-git/#accessing-to-the-environment","text":"The grant cluster method to get access to a Kubernetes cluster will assign access permissions to a cluster or namespace in a cluster that was created prior to the request. Creating a cluster and provisioning the VMs and other resources and deploying the tools may take up to 15 minutes and longer if queued. Permissioning access to an existing cluster in contrast happens in 1 or 2 minutes depending on the number of concurrent requests. You need an IBM Cloud account to access your cluster, If you do not have an IBM Cloud account yet, register at https://cloud.ibm.com/registration , Or find instructions to create a new IBM Cloud account here , To grant a cluster, You need to be given a URL to submit your grant cluster request, Open the URL to grant a cluster, e.g. https://<workshop>.mybluemix.net , The grant cluster URL should open the following page, Log in to this IBM Cloud account using the lab key given to you by the instructor and your IBM Id to access your IBM Cloud account, Instructions will ask to Log in to this IBM Cloud account When you click the link to log in to the IBM Cloud account, the IBM Cloud overview page will load with an overview of all resources on the account. In the top right, you will see an active account listed. The active account should be the account on which the cluster is created, which is not your personal account. Click the account dropdown if you need to change the active account. Navigate to Clusters, And select the cluster assigned to you... Details for your cluster will load. Click on the blue OpenShift web console button.","title":"Accessing to the environment"},{"location":"lab-1-no-git/#using-devfiles-in-coderedy-workspaces","text":"","title":"Using devfiles in CodeRedy Workspaces"},{"location":"lab-1-no-git/#accessing-codeready-workspaces","text":"To launch CodeReady Workspaces, click on Networking on the left navigation bar and select Routes . In the Project dropdown, select openshift-workspaces Look for the route named codeready and click on the link under the location column. After navigating to the link, you should get a page asking about granting permission to CodeReady Workspaces. Select Grant All . Then, you will be taken to the registration form that will need to be completed. It's important that for the username field you remove the IAM# and @abc.com parts of your identity. If you get an error message about the name needing to conform to DNS naming standards, remove any periods or special characters from your username and try again. After submitting the form you will be taken to your own personal workspaces in CodeReady Workspaces.","title":"Accessing CodeReady Workspaces"},{"location":"lab-1-no-git/#creating-a-devfile-in-codeready-workspaces","text":"The first page you will be taken to is a page full of different sample workspaces. These workspaces contain tools and a development environment needed to start developing in those specific languages. These environment definitions are contained in what's called a Devfile . For this lab, we will create our own devfile and workspace. Click on the Custom Workspace tab at the top of the page. For Workspace Name enter Node-Example . For the URL of devfile box in the Devfile section enter https://raw.githubusercontent.com/odrodrig/nodejs-ex/master/devfile.yaml and then click on Load devfile . If you are unable to load the devfile from GitHub, here are the contents that you can copy and paste in: apiVersion : 1.0.0 metadata : generateName : Node-Example components : - mountSources : true endpoints : - name : nodejs port : 3000 memoryLimit : 1024Mi type : dockerimage alias : runtime image : 'quay.io/eclipse/che-nodejs10-ubi:nightly' Click on Create and Open at the bottom of the page. The button might be hidden so you might need to scroll down to see it. The workspace will take a few minutes to fully be created. When done, you should see be inside the code editor. Once the editor is up, click on the choice for Git Clone under the New section on the welcome page When asked for a Repository URL enter https://github.com/odrodrig/nodejs-ex then press enter. A new window should appear asking where to save the files, accept the default and click on the ** ** button at the bottom. When it is done cloning you should see a pop up in the bottom right of the page asking if it should open the clone repository. Click on Open . Expand the project explorer by clicking on the icon that looks like 2 pieces of paper on the left toolbar. You should see the project that you cloned from GitHub. Click on the folder of the project that you cloned and select the devfile.yaml file. This is the file we used to create this workspace. Let's break down this file to understand what it defined for us in the workshop. apiVersion - The version of the devfile API we are using. Version 2.0.0 was recently released but CodeReady Workspaces does not support it yet. metadata - Contains metadata for the workspace. Name is a required property. components - These are the additions to your workspace such as plugins and tools to assist with development or application components such as kubernetes objects or docker containers. In our imported devfile, we have one component which is the containerized runtime environment for our node application. Another type of component that can be added is a che plugin , These plugins give us additional functionality in the CodeReady Workspaces IDE. - In our workspace let's add a typescript plugin that will give us some code completion, error checking, and more. Click on View in the top toolbar and select Plugins . This will open up a new pane on the left side with a list of all plugins available to be installed. In the search bar, enter typescript and click on the Install button for the result that appears. Then, click on the green message that appears that says Click here to apply changes , then click on Restart in the new dialog box that comes up. You might be asked if you are sure you want to leave the page, click on Leave Page . The workspace will be rebuilt with the new plugin installed. Let's test out our new plugin. Open up the server.js file, type in jiberish, and see the plugin highlight the mistake. As you can see in the screenshot below, the typescript plugin ( ts ) caught the syntax error. Be sure to delete any jiberish you do type out. CodeReady Workspaces will maintain a devfile of the workspace's current configuration, including the plugin we just installed. To access this devfile, click on the yellow button at the top left of the page to expand the left menu. Then click on Workspaces . Click on your workspace and then click on the Devfile tab. Copy the entire devfile contents. Return to the workspace by clicking on the Node-Example workspace on the left menu. Then replace the contents of devfile.yaml with the contents you copied earlier by highlighting all the code and pasting in the devfile. You should see a new entry under components ; the typescript che plugin. Another property that you can add to devfiles is the projects array. This will bring in those project files into the environment. For our lab we will specify a git repo in this section so that it will be cloned in automatically when the environment is created. In devfile.yaml add the following code block to the bottom: projects : - name : nodejs-ex source : location : 'https://github.com/odrodrig/nodejs-ex.git' type : git branch : master Your new devfile should look like this: metadata : name : Node-Example components : - mountSources : true endpoints : - name : nodejs port : 3000 memoryLimit : 1024Mi type : dockerimage alias : runtime image : 'quay.io/eclipse/che-nodejs10-ubi:nightly' - id : che-incubator/typescript/latest type : chePlugin apiVersion : 1.0.0 projects : - name : nodejs-ex source : location : 'https://github.com/odrodrig/nodejs-ex.git' type : git branch : master Next, let's add the commands array which will allow us to run commands to build and run the application within the runtime container. Add the following to the and of the devfile. commands : - name : devBuild actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : npm install component : runtime - name : devRun actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : nodemon app.js component : runtime Your devfile should now look like this: metadata : name : Node-Example projects : - name : nodejs-ex source : location : 'https://github.com/odrodrig/nodejs-ex.git' type : git branch : master components : - mountSources : true endpoints : - name : nodejs port : 3000 memoryLimit : 1024Mi type : dockerimage alias : runtime image : 'quay.io/eclipse/che-nodejs10-ubi:nightly' - id : che-incubator/typescript/latest type : chePlugin apiVersion : 1.0.0 commands : - name : devBuild actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : npm install component : runtime - name : devRun actions : - workdir : '${CHE_PROJECTS_ROOT}/nodejs-ex/' type : exec command : nodemon app.js component : runtime Now we need to rebuild the workspace to include the commands we just added. Copy the contents of your new devfile.yaml then click on the yellow menu button at the top left and click on the Workspaces button again. Next, click on your workspace and then click on the devfile tab. Replace the existing devfile by highlighting the code and pasting in the code that you copied from your new devfile. Then, click on the green Apply button at the bottom right. This will rebuild your workspace and take a few minutes. Return to the workspace by clicking on the Node-Example workspace on the left menu. Now we can run our application using the commands that we just added. Click on the Terminal button in the toolbar and select Run task... . This is where you can run commands specified in the devfile. In the new dialog that appears select devBuild . This will run npm install in the runtime container to download the necessary dependencies for our application. You should notice a new tab appear at the bottom of the page with the build output. Next, click on Terminal again, select Run task... , and this time select devRun . This will run the application in the runtime container and allow us to test out it's functionality. After running the application, you will get a pop up saying that A process is now listening on port 3000.... . Click on the blue button that says Open in Preview to open the link to view your running application. A new section should open up on the right side of the page which contains a preview of your application. By looking in the address bar you may also notice that this is actually running as a container on OpenShift. Any changes you make to the code will be automatically applied to the running application giving you an easy way to test changes out. Let's test this out. In your project explorer on the left side of the page, click on the nodejs-ex folder to expand it and select server.js . Then, go to line 55. You should see the following code there: res . send ( 'Hello from Node.js Starter Application with odo!' ); Go ahead and customize the message to say what ever you'd like or simply add something extra at the end of the string in between the single quotes. For example: res . send ( 'Hello from Node.js Starter Application with CodeReady Workspaces!' ); You should notice some output in the devRun tab at the bottom of the page. This means that your application has detected changes and is rebuilding. Click on the refresh button in the application preview on the right side of the page to view your latest changes.","title":"Creating a DevFile in CodeReady Workspaces"},{"location":"lab-1-no-git/#optional-pushing-changes-to-github","text":"Now let's push our changes back to GitHub so that we can share this workspace with other developers. Click on the Source Control: git button on the left toolbar. It should look like the following: You will be shown a list of changes we made since the project was cloned from github. Hover over the word Changes and you should see a + appear. Click on it to stage all of our changes for a commit. Then click on the text box labeled Message and enter Updated devfile . Then click on the check mark right above the textbox to commit your changes. Next, click on the 3-button menu in the Source Control panel and select push . You will then get a prompt asking for your username. Enter your GitHub username and then press enter. Then, you will be asked for your password. Enter your GitHub password and press enter. With that done your new devfile has been pushed to GitHub and can be shared with other developers using CodeReady Workspaces.","title":"(Optional) Pushing changes to GitHub"},{"location":"lab-1-no-git/#extra-credit-using-odo-to-develop-containerized-applications","text":"In this section we will explore how we can take the devfile we created earlier and use it to develop our application locally.","title":"EXTRA CREDIT: Using odo to develop containerized applications"},{"location":"lab-1-no-git/#getting-access-to-an-environment","text":"If you have already registered your account, you can access the lab environment at https://labs.cognitiveclass.ai and login. Navigate to https://labs.cognitiveclass.ai/register , Create a new account with your existing IBM Id. Alternative, you can choose to use a Social login (LinkedIn, Google, Github or Facebook), or for using your email account click the Cognitive Class button, Click Create an Account , Fill in your Email, Full Name, Public Username and password, click on the check boxes next to the Privacy Notice and Terms of Service to accept them. Then click on Create Account . You will then be taken to a page with a list of sandbox environments. Click on the option for Theia - Cloud IDE (With OpenShift) Wait a few minutes while your environment is created. You will be taken to a blank editor page once your environment is ready. What we really need is access to the terminal. Click on the Terminal tab near the top of the page and select New Terminal You can then click and drag the top of the terminal section upwards to make the terminal section bigger.","title":"Getting access to an environment"},{"location":"lab-1-no-git/#installing-odo","text":"Then, we need to clone the repository locally. Run the following command in that terminal environment: git clone https://github.com/odrodrig/nodejs-ex.git cd nodejs-ex Next, we need to run the installation script for odo bash install_odo.sh","title":"Installing odo"},{"location":"lab-1-no-git/#logging-into-our-cluster","text":"Go back to your OpenShift web console and click on your username in the upper right and select Copy Login Command option. Click the Display Token link. Copy the contents of the field Log in with this token to the clipboard. It provides a login command with a valid token for your username. Go to the your web terminal on Skills Lab and paste in the log in command. Press enter. Now we need to point our odo instance to our own namespace that was created for us. First, list the available projects in the cluster. odo project list Then find your project, it should start with your username that you created when logging into CodeReady Workspaces and end in -codeready For example, my username is odrodrig so my project is odrodrig-codeready . In the following command replace odrodrig-codeready with your own project name. odo project set odrodrig-codeready","title":"Logging into our cluster"},{"location":"lab-1-no-git/#using-odo-to-develop-on-openshift","text":"With odo you can specify a registry of components that you can create based on devfiles or Source-to-Image build containers. Let's see what components we have available to us in the odo catalog. odo catalog list components Let's create a nodejs application based on the nodejs devfile. First, delete the devfile that is in the directory. We will use the devfile that is in the devfile registry. rm devfile.yaml Create the component: odo component create nodejs nodejs-ex This command will download the devfile for the nodejs stack from the devfile registry and put it in our project directory. It will also create a .odo directory that has some configurations for deployment. Now we can deploy the application using odo push . odo push After a few minutes your application will be pushed. Find the URL to access our application. odo url list The output should be similar to: Found the following URLs for component nodejs-ex NAME STATE URL PORT SECURE KIND http-3000 Pushed http://http-3000-nodejs-ex-odrodrig-codeready.oliver-sandbox-2bef1f4b4097001da9502000c44fc2b2-0000.us-east.containers.appdomain.cloud 3000 false route Copy the URL under the URL column and paste it into a new browser tab. You should see your application running with a simple welcome message. Let's do some coding with live updates using the odo watch command. This will allow us to see changes automatically reflected in the deployed application. odo watch You should then see a message about waiting for something to change. What has happened is now there is a file watcher waiting for changes to be saved to your source code. Once changes are detected, those changes are pushed to the runtime environment that we just deployed and the application will be updated without having to do a manual push. If you resized your terminal window, make it smaller by dragging the top of the panel down to make room for the code editor. Then open the file explorer by clicking on the icon on the left navigation menu that looks like two pieces of paper. With the File explorer open, click on server.js Go to line 55 and change the welcome message in res.send() to something else like, Hello this is a test of live updates from odo . Then save the file by going to File -> Save or using the save shortcut (cmd + s for Mac, ctrl + s for Windows). Go to your browser tab that had the running application and refresh to see the new message. Let's end the odo watch session by going back to our terminal environment and pressing control + c to end it.","title":"Using odo to develop on OpenShift"},{"location":"lab-1-no-git/#conclusion","text":"In this lab we explored the OpenShift developer experience using CodeReady Workspaces which gave us a development environment on OpenShift that we could access through our browser. We then made our own custom workspace using a devfile and made some quick edits to our sample application. Lastly, we explored odo as a cli tool that allows us to build containerized applications without having to write dockerfiles or kubernetes manifests. Using odo we were able to create a development environment that was defined in a devfile and deploy an application to OpenShift.","title":"Conclusion"},{"location":"pre-work/","text":"Pre-work \u00b6 This section is broken up into the following steps: Sign up for IBM Cloud Download or clone the repo 1. Sign up for IBM Cloud \u00b6 Ensure you have an IBM Cloud ID 2. Download or clone the repo \u00b6 Various parts of this workshop will require the attendee to upload files or run scripts that we've stored in the repository. So let's get that done early on, you'll need git on your laptop to clone the repository directly, or access to GitHub.com to download the zip file. To Download, go to the GitHub repo for this workshop and download the archived version of the workshop and extract it on your laptop. Alternately, run the following command: git clone https://github.com/IBM/workshop-template cd workshop-template","title":"Lab 0. Pre-work"},{"location":"pre-work/#pre-work","text":"This section is broken up into the following steps: Sign up for IBM Cloud Download or clone the repo","title":"Pre-work"},{"location":"pre-work/#1-sign-up-for-ibm-cloud","text":"Ensure you have an IBM Cloud ID","title":"1. Sign up for IBM Cloud"},{"location":"pre-work/#2-download-or-clone-the-repo","text":"Various parts of this workshop will require the attendee to upload files or run scripts that we've stored in the repository. So let's get that done early on, you'll need git on your laptop to clone the repository directly, or access to GitHub.com to download the zip file. To Download, go to the GitHub repo for this workshop and download the archived version of the workshop and extract it on your laptop. Alternately, run the following command: git clone https://github.com/IBM/workshop-template cd workshop-template","title":"2. Download or clone the repo"},{"location":"resources/ADMIN/","text":"Admin Guide \u00b6 This section is comprised of the following steps: Instructor Step 1. Instructor Step \u00b6 Things specific to instructors can go here.","title":"Admin Guide"},{"location":"resources/ADMIN/#admin-guide","text":"This section is comprised of the following steps: Instructor Step","title":"Admin Guide"},{"location":"resources/ADMIN/#1-instructor-step","text":"Things specific to instructors can go here.","title":"1. Instructor Step"},{"location":"resources/CONTRIBUTORS/","text":"Contributors \u00b6 Remko de Knikker \u00b6 Github: remkohdev Twitter: @remkohdev LinkedIn: remkohdev Medium: @remkohdev Steve Martinelli \u00b6 Github: stevemar Twitter: @stevebot LinkedIn: stevemar","title":"Contributors"},{"location":"resources/CONTRIBUTORS/#contributors","text":"","title":"Contributors"},{"location":"resources/CONTRIBUTORS/#remko-de-knikker","text":"Github: remkohdev Twitter: @remkohdev LinkedIn: remkohdev Medium: @remkohdev","title":"Remko de Knikker"},{"location":"resources/CONTRIBUTORS/#steve-martinelli","text":"Github: stevemar Twitter: @stevebot LinkedIn: stevemar","title":"Steve Martinelli"},{"location":"resources/MKDOCS/","text":"mkdocs examples \u00b6 This page includes a few neat tricks that you can do with mkdocs . For a complete list of examples visit the mkdocs documentation . Code \u00b6 print ( \"hello world!\" ) Code with line numbers \u00b6 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Code with highlights \u00b6 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Code with tabs \u00b6 Tab Header #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } Another Tab Header #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } More tabs \u00b6 Windows If on windows download the Win32.zip file and install it. MacOS Run brew install foo . Linux Run apt-get install foo . Checklists \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst Add a button \u00b6 Launch the lab Visit IBM Developer Sign up! Call outs \u00b6 Tip You can use note , abstract , info , tip , success , question warning , failure , danger , bug , quote or example . Note A note. Abstract An abstract. Info Some info. Success A success. Question A question. Warning A warning. Danger A danger. Example A example. Bug A bug. Call outs with code \u00b6 Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Formatting \u00b6 In addition to the usual italics , and bold there is now support for: highlighted underlined strike-through Tables \u00b6 OS or Application Username Password Windows VM Administrator foo Linux VM root bar Emojis \u00b6 Yes, these work. Images \u00b6 Nunc eu odio eleifend, blandit leo a, volutpat sapien right align image \u00b6 Nunc eu odio eleifend, blandit leo a, volutpat sapien","title":"MkDocs Cheatsheet"},{"location":"resources/MKDOCS/#mkdocs-examples","text":"This page includes a few neat tricks that you can do with mkdocs . For a complete list of examples visit the mkdocs documentation .","title":"mkdocs examples"},{"location":"resources/MKDOCS/#code","text":"print ( \"hello world!\" )","title":"Code"},{"location":"resources/MKDOCS/#code-with-line-numbers","text":"1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Code with line numbers"},{"location":"resources/MKDOCS/#code-with-highlights","text":"def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Code with highlights"},{"location":"resources/MKDOCS/#code-with-tabs","text":"Tab Header #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } Another Tab Header #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"Code with tabs"},{"location":"resources/MKDOCS/#more-tabs","text":"Windows If on windows download the Win32.zip file and install it. MacOS Run brew install foo . Linux Run apt-get install foo .","title":"More tabs"},{"location":"resources/MKDOCS/#checklists","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst","title":"Checklists"},{"location":"resources/MKDOCS/#add-a-button","text":"Launch the lab Visit IBM Developer Sign up!","title":"Add a button"},{"location":"resources/MKDOCS/#call-outs","text":"Tip You can use note , abstract , info , tip , success , question warning , failure , danger , bug , quote or example . Note A note. Abstract An abstract. Info Some info. Success A success. Question A question. Warning A warning. Danger A danger. Example A example. Bug A bug.","title":"Call outs"},{"location":"resources/MKDOCS/#call-outs-with-code","text":"Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.","title":"Call outs with code"},{"location":"resources/MKDOCS/#formatting","text":"In addition to the usual italics , and bold there is now support for: highlighted underlined strike-through","title":"Formatting"},{"location":"resources/MKDOCS/#tables","text":"OS or Application Username Password Windows VM Administrator foo Linux VM root bar","title":"Tables"},{"location":"resources/MKDOCS/#emojis","text":"Yes, these work.","title":"Emojis"},{"location":"resources/MKDOCS/#images","text":"Nunc eu odio eleifend, blandit leo a, volutpat sapien","title":"Images"},{"location":"resources/MKDOCS/#right-align-image","text":"Nunc eu odio eleifend, blandit leo a, volutpat sapien","title":"right align image"},{"location":"resources/RESOURCES/","text":"Additional resources \u00b6 IBM Demos \u00b6 Collection: InfoSphere Information Server Tutorial: Transforming your data with IBM DataStage Redbooks \u00b6 IBM InfoSphere DataStage Data Flow and Job Design InfoSphere DataStage Parallel Framework Standard Practices Videos \u00b6 Video: Postal codes and part numbers (DataStage) Video: Find relationships between sales, employees, and customers (Information Analyzer) Video: Clean and analyze data (Governance Catalog)","title":"Additional Resources"},{"location":"resources/RESOURCES/#additional-resources","text":"","title":"Additional resources"},{"location":"resources/RESOURCES/#ibm-demos","text":"Collection: InfoSphere Information Server Tutorial: Transforming your data with IBM DataStage","title":"IBM Demos"},{"location":"resources/RESOURCES/#redbooks","text":"IBM InfoSphere DataStage Data Flow and Job Design InfoSphere DataStage Parallel Framework Standard Practices","title":"Redbooks"},{"location":"resources/RESOURCES/#videos","text":"Video: Postal codes and part numbers (DataStage) Video: Find relationships between sales, employees, and customers (Information Analyzer) Video: Clean and analyze data (Governance Catalog)","title":"Videos"}]}